
Rspec - фреймворк для тестирования приложений

gem install rspec

Запуск тестов:

rspec

В Rspec существует 2 слова:

    describe
    it

Создадим и протестируем героя компьютерной игры.

Создадим файл hero.rb

class Hero

  def initialize(name, health=100)
    @name = name.capitalize
    @health = health
  end

  attr_reader :name

  def power_up
    @health += 10
  end

  def power_down
    @health -= 10
  end

  def hero_info
    "#{@name} has #{@health} health"
  end

end

Создадим файл hero_spec.rb:

require './hero'

describe Hero do

  it "has a capitalized name" do
    hero = Hero.new 'foo'

    expect(hero.name).to eq 'Foo'
  end

  it "can power up" do
    hero = Hero.new 'foo'

    expect(hero.power_up).to eq 110    мы ожидаем что будет 110
  end

end

И, запустим тест:

rspec hero_spec.rb

Написание тестов в большом приложении - это вклад в будущее, защита приложения от ошибок.

Продолжим рассматривать Rspec и тестирование.

Добавим к нашим тестам в файле hero_spec.rb

  it "can power down" do
    hero = Hero.new 'foo'

    expect(hero.power_down).to eq 90
  end

  it "displays full hero info" do
    hero = Hero.new 'foo'

    expect(hero.hero_info).to eq "Foo has 100 health"
  end


Структура тестов:
слова встречающиеся в тестировании

# arrange  - подготовка  | car = Car.new
# act     -  действие    | car.add_fuel 10
# assert  - проверка     | expect(result) 



rspec hero_spec.rb --color(цветной вывод) запуск теста 


У нас часто повторяется код hero = Hero.new 'foo',
 и это не совпадает с DRY (Don`t Repeat Yourself), вы не должны писать повторяющийся  код
ниже мы его оптимизируем, добавив before-do-end


Рефакторинг hero_spec.rb:

require './hero'

describe Hero do

  before do
    @hero = Hero.new 'foo'
  end

  it "has a capitalized name" do
    expect(@hero.name).to eq 'Foo'
  end

  it "can power up" do
    expect(@hero.power_up).to eq 110
  end

  it "can power down" do
    expect(@hero.power_down).to eq 90
  end

  it "displays full hero info" do
    expect(@hero.hero_info).to eq "Foo has 100 health"
  end

end


Тесты должны быть:

    надёжные (reliable) - дают тот же результат - без зависимостей от соединения, от БД и т.п.
    easy to write - если тест пишется не легко, то что-то не так с тем, что тестируем.
    easy to understand - лёгкие для понимания другими программистами.
    скорость не особо важна
    не важно DRY
